FIXME: all 'App' references should instead say 'Teado'
Outline
	My experience
	show off Teado
Rails culture
	rails command
	rake
	bundle
	rack middlewares
The asset pipeline
	introduction
		New set of conventions/technologies for images/scipts/styles
		Compilation
			sass -> css
			coffeescript -> js
		Development mode
			Dynamically include scripts/styles
			Compile changed files on demand
			Unmodified files: 301 header (not modified)
		Production mode
			Concatenation
			Minification
			Cache busting filename fingerprints
	Using with Sencha
		Load paths:
			/app/assets/
			/lib/assets/
			/vendor/assets/
		Install:
			vendor/assets/javascripts/sencha-touch.js
			vendor/assets/stylesheets/sencha-touch.css
		Set up Sprockets directives (require, require_tree)
			app/assets/stylesheets/application.css
			app/assets/javascripts/application.js
		Touch application
			Rails convention: app/assets/javascripts/app
			Sencha convention: app/app.js
			Convention: many/nested/directories/app.js
			mkdir touch
			ln -s touch app/assets/javascripts/app
		Compass integration
			rails 3.1.1
			Gemfile: compass, :tag => "v0.12.alpha.0"
			Gemfile: compass-sencha-touch, :tag => "1.1.1"
			Update touch.css -> touch.css.scss
			Replace =require with @import
	Criticisms
		First release - rough edges
		Sprockets - one size doesn't fit all
		Compass is better for managing SASS
		npm is better for managing JS dependencies 
Creating a rails app from scratch
	rails new ~/code/Teado
	cd !$
	edit config/database.yml
	rake db:create
	rails serve
	rails generate controller touch
	copy Sencha Touch libs to vendor/assets
	create an application at app/assets/javascripts/app/app.js.coffee
	set up the view
Authentication
	Use Railscasts demo auth from scratch
	show model <- business logic
	show routes
	show the sessions controller JSON only
	Sencha side:
		show login form
		handle success
		handle failure
		show currentUser store
		show dashboard panel
	GOTCHA: CSRF protection
Ruby speaks JSON
	JS parseInt("042")
	ruby to_s/to_i
	rails as_json
		:only => [whitelist]
		:except => [blacklist]
		:more laterz (associations, virtual attributes)
Associations
	rails generate migration create_tags_tasks_table
	rails: task has_many :tags
	sencha: ditto!
	as_json :include => :tags
Simple CRUD
	rails generate model tag name:string
	rake db:migrate
	examine the generated controller
		7 actions
		html AND json responses
	show the corresponding sencha controller
	GOTCHA: form.load(model) conflict
Virtual attributes
	demonstrate adding due_at via bucket text
Rails as a backend to standalone apps
	JSONP
	Sencha: 'scripttag' proxy
	callback parameter
	rack middleware
	: https://github.com/robertodecurnex/rack-jsonp-middleware
	: https://github.com/rack/rack-contrib
